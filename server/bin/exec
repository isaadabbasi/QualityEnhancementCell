
/**
 * Module dependencies.
 */
// console.log(process.argv)
const 
    cluster = require('cluster'),
    app = require('../../server.js'),
    debug = require('debug')('server:server'),
    cpuCount = require('os').cpus().length,
    http = require('http'),
    https = require('https'),
    fs = require('fs'),
    args = require('yargs').argv,
    { mode = null, port = process.env.PORT || 3000 } = args;



if(cluster.isMaster && (mode == 'cluster' || mode == 'c')){
  let { cpus = 4 } = args;
  !Number.isInteger(cpus) && (cpus = 4);
  
  console.log(`\n\n\t\t\t *** CLUSTERING SERVER ON ${cpus} CORES ***`);
  console.log(`\t\t\t *** UNLEASHED POWER WITH NODE *** \n\n`);
  // let worker;
    
  if(cpus > cpuCount){
    console.log(`Your system can assign ${cpuCount} at max.`);
    console.log(`SYSTEM TERMINATING...\n`);
    process.exit();
  }

    console.log(`==> Master running with PID ${process.pid}...`)
    for(let i=0; i< cpus; i++){
      cluster.fork();
    } 

    cluster.on('online', ()=> {
    })
    cluster.on('exit', ()=> {
        console.log(`=> process with PID ${process.pid} down...`)
        cluster.fork();
    })
}
else {
// if(cluster.isWorker){
//  * Get port from environment and store in Express.
    app.set('port', normalizePort( port ));
    /**
     * Create HTTP server.
     */
    var server = http.createServer(app);
    // var httpsServer = https.createServer({
    //   key: fs.readFileSync('key.pem'),
    //   cert: fs.readFileSync('cert.pem')
    // }, app)

/**
 * Listen on provided port, on all network interfaces.
 */
    server.listen(port, ()=>{
      console.log(`*** NODE UP at PORT ${port}, PID ${app.get('port')} ***`);
    });
    server.on('error', onError);
    server.on('listening', onListening);
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
